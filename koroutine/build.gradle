plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'kotlin-kapt'

    id("org.jetbrains.kotlinx.kover") version "0.6.1"
}

android {
    namespace 'com.lj.koroutine.koroutine'
    compileSdkVersion 33

    defaultConfig {
        minSdkVersion 31
        targetSdkVersion 33
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        versionCode 1
        versionName "0.0.1"
    }

    kover {
        verify {
            onCheck.set(true)
            rule {
                name = "Minimal line coverage rate in percents"
                bound {
                    minValue = 80
                    // change coverage metric to evaluate (LINE, INSTRUCTION, BRANCH)
                    counter = kotlinx.kover.api.CounterType.LINE
                    // change counter value (COVERED_COUNT, MISSED_COUNT, COVERED_PERCENTAGE, MISSED_PERCENTAGE)
                    valueType = kotlinx.kover.api.VerificationValueType.COVERED_PERCENTAGE
                }
            }
            rule {
                name = "Minimal branch coverage rate in percents"
                bound {
                    minValue = 10
                    // change coverage metric to evaluate (LINE, INSTRUCTION, BRANCH)
                    counter = kotlinx.kover.api.CounterType.BRANCH
                    // change counter value (COVERED_COUNT, MISSED_COUNT, COVERED_PERCENTAGE, MISSED_PERCENTAGE)
                    valueType = kotlinx.kover.api.VerificationValueType.COVERED_PERCENTAGE
                }
            }
            rule {
                name = "Minimal instruction coverage rate in percents"
                bound {
                    minValue = 80
                    // change coverage metric to evaluate (LINE, INSTRUCTION, BRANCH)
                    counter = kotlinx.kover.api.CounterType.INSTRUCTION
                    // change counter value (COVERED_COUNT, MISSED_COUNT, COVERED_PERCENTAGE, MISSED_PERCENTAGE)
                    valueType = kotlinx.kover.api.VerificationValueType.COVERED_PERCENTAGE
                }
            }
        }
    }

    libraryVariants.all { variant ->
        if (variant.buildType.name == "release") {
            variant.outputs.each { output ->
                output.outputFileName = "${archivesBaseName}-v${defaultConfig.versionName}.aar"
            }
        }
    }
}

dependencies {
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.6.4'

    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.6.4'
    testImplementation 'junit:junit:4.13.2'
}